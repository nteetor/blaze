% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paths.R
\name{paths}
\alias{paths}
\title{Declare Paths for Use with Shiny}
\usage{
paths(..., app_path = NULL)
}
\arguments{
\item{...}{Path names as character strings that will be valid entry points
into your Shiny app.}

\item{app_path}{The name of the sub-directory where your Shiny app is hosted,
e.g. `host.com/<app_path>/`.}
}
\value{
Invisibly writes temporary HTML files to be hosted by Shiny to
  redirect users to the requested path within your Shiny app. The [paths()]
  function returns the temporary folder used by \pkg{blaze}.
}
\description{
Declare path endpoints that will be available inside your Shiny app. This
function should be called before the call to [shiny::shinyApp()] in your
`app.R` file or inside your `server.R` script before the server function.
This function makes it possible for users to enter your app URL with a path,
e.g. `<myapp.com>/about`, and be directed to the `"about"` page within your
Shiny app.
}
\examples{
\dontrun{
library(shiny)
library(blaze)

options(shiny.launch.browser = TRUE)

blaze::paths(
  "home",
  "about",
  "explore"
)

shinyApp(
  ui = fluidPage(
    blaze(),
    tags$nav(
      pathLink("/home", "Home"),
      pathLink("/about", "About"),
      pathLink("/explore", "Explore")
    ),
    uiOutput("page")
  ),
  server = function(input, output, session) {
    state <- reactiveValues(page = NULL)

    observePath("/home", {
      state$page <- "Home is where the heart is."
    })

    observePath("/about", {
      state$page <- "About this, about that."
    })

    observePath("/explore", {
      state$page <- div(
        p("Curabitur blandit tempus porttitor."),
        p("Vivamus sagittis lacus augue rutrum dolor auctor.")
      )
    })

    output$page <- renderUI(state$page)
  }
)
}

}
